-- File Explorer
return {}
-- return {
--   'nvim-neo-tree/neo-tree.nvim',
--   branch = 'v3.x',
--   dependencies = {
--     'nvim-lua/plenary.nvim',
--     'nvim-tree/nvim-web-devicons',
--     'MunifTanjim/nui.nvim',
--   },
--   deactivate = function()
--     vim.cmd [[Neotree close]]
--   end,
--   init = function()
--     -- FIX: use `autocmd` for lazy-loading neo-tree instead of directly requiring it,
--     -- because `cwd` is not set up properly.
--     vim.api.nvim_create_autocmd('BufEnter', {
--       group = vim.api.nvim_create_augroup('Neotree_start_directory', { clear = true }),
--       desc = 'Start Neo-tree with directory',
--       once = true,
--       callback = function()
--         if package.loaded['neo-tree'] then
--           return
--         else
--           local stats = vim.uv.fs_stat(vim.fn.argv(0))
--           if stats and stats.type == 'directory' then
--             require 'neo-tree'
--           end
--         end
--       end,
--     })
--   end,
--   opts = {
--     sources = { 'filesystem', 'buffers', 'git_status' },
--     open_files_do_not_replace_types = { 'terminal', 'Trouble', 'trouble', 'qf', 'Outline' },
--     filesystem = {
--       bind_to_cwd = false,
--       follow_current_file = { enabled = true },
--       use_libuv_file_watcher = true,
--     },
--     commands = {
--       copy_selector = function(state)
--         local node = state.tree:get_node()
--         local filepath = node:get_id()
--         local filename = node.name
--         local modify = vim.fn.fnamemodify
--
--         local vals = {
--           ['RELATIVE'] = modify(filepath, ':.'),
--           ['BASENAME'] = modify(filename, ':r'),
--           ['EXTENSION'] = modify(filename, ':e'),
--           ['FILENAME'] = filename,
--           ['HOME'] = modify(filepath, ':~'),
--           ['ABSOLUTE'] = filepath,
--           ['URI'] = vim.uri_from_fname(filepath),
--         }
--
--         local options = vim.tbl_filter(function(val)
--           return vals[val] ~= ''
--         end, vim.tbl_keys(vals))
--         if vim.tbl_isempty(options) then
--           vim.notify('No values to copy', vim.log.levels.WARN)
--           return
--         end
--         table.sort(options)
--         vim.ui.select(options, {
--           prompt = 'Choose to copy to clipboard:',
--           format_item = function(item)
--             return ('%s: %s'):format(item, vals[item])
--           end,
--         }, function(choice)
--           local result = vals[choice]
--           if result then
--             vim.notify(('Copied: `%s`'):format(result))
--             vim.fn.setreg('+', result)
--           end
--         end)
--       end,
--     },
--     window = {
--       mappings = {
--         ['<space>'] = 'none',
--         ['Y'] = 'copy_selector',
--       },
--     },
--   },
--   config = function(_, opts)
--     vim.keymap.set('n', '<leader>ee', '<cmd>Neotree toggle<CR>', { desc = 'Neotree toggle' })
--     vim.keymap.set('n', '<leader>eg', '<cmd>Neotree git_status<CR>', { desc = 'Neotree toggle' })
--     vim.keymap.set('n', '<leader>eb', '<cmd>Neotree buffers<CR>', { desc = 'Neotree toggle' })
--
--     require('neo-tree').setup(opts)
--   end,
-- }
