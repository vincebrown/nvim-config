return {
  {
    'neanias/everforest-nvim',
    priority = 1000,
    lazy = false,
    config = function()
      require('everforest').setup {
        background = 'hard',
        transparent_background_level = 2,
        disable_italic_comments = true,
        float_style = 'dim',
        on_highlights = function(hl, palette)
          hl.YankyYanked = { bg = palette.bg_blue }
          hl.YankyPut = { bg = palette.bg_blue }
          hl.Visual = { bg = palette.bg1 }

          -- Tiny Inline Diagnostics
          hl.TinyInlineDiagnosticVirtualTextError = { fg = palette.red }
          hl.TinyInlineDiagnosticVirtualTextWarn = { fg = palette.yellow }
          hl.TinyInlineDiagnosticVirtualTextInfo = { fg = palette.purple }
          hl.TinyInlineDiagnosticVirtualTextHint = { fg = palette.green }

          -- Treesitter

          -- hl['@type.builtin'] = { fg = palette.aqua }
          -- hl['@type.definition'] = { fg = palette.aqua }
          -- hl['@type.qualifier'] = { fg = palette.aqua }

          -- hl['@function'] = { fg = palette.green }
          -- hl['@function.builtin'] = { fg = palette.blue }
          -- hl['@keyword.function.typescript'] = { fg = palette.blue }
          -- ['@function.call'] = { link = 'TSFunctionCall' },
          -- ['@function.macro'] = { link = 'TSFuncMacro' },

          -- hl['@keyword.conditional'] = { fg = palette.purple }
          hl['@lsp.type.keyword.go'] = { fg = palette.blue }
          -- hl['@keyword.typescript'] = { fg = palette.orange }
          --
          -- hl['@character'] = { link = 'TSCharacter' }
          -- hl['@character.special'] = { link = 'TSCharacterSpecial' }
          -- hl['@comment'] = { link = 'TSComment' }
          -- hl['@conceal'] = { link = 'Grey' }
          -- hl['@constant'] = { link = 'TSConstant' }
          -- hl['@constant.builtin'] = { link = 'TSConstBuiltin' }
          -- ['@constant.macro'] = { link = 'TSConstMacro' },
          -- ['@constructor'] = { link = 'TSConstructor' },
          -- ['@debug'] = { link = 'TSDebug' },
          -- ['@define'] = { link = 'TSDefine' },
          -- ['@error'] = { link = 'TSError' },
          -- ['@exception'] = { link = 'TSException' },
          -- ['@field'] = { link = 'TSField' },
          -- ['@float'] = { link = 'TSFloat' },
          -- ['@include'] = { link = 'TSInclude' },
          -- ['@keyword'] = { link = 'TSKeyword' },
          -- ['@keyword.function'] = { link = 'TSKeywordFunction' },
          -- ['@keyword.operator'] = { link = 'TSKeywordOperator' },
          -- ['@keyword.return'] = { link = 'TSKeywordReturn' },
          -- ['@label'] = { link = 'TSLabel' },
          -- ['@math'] = { link = 'TSMath' },
          -- ['@method'] = { link = 'TSMethod' },
          -- ['@method.call'] = { link = 'TSMethodCall' },
          -- ['@namespace'] = { link = 'TSNamespace' },
          -- ['@none'] = { link = 'TSNone' },
          -- ['@number'] = { link = 'TSNumber' },
          -- ['@operator'] = { link = 'TSOperator' },
          -- ['@parameter'] = { link = 'TSParameter' },
          -- ['@parameter.reference'] = { link = 'TSParameterReference' },
          -- ['@preproc'] = { link = 'TSPreProc' },
          -- ['@property'] = { link = 'TSProperty' },
          -- ['@punctuation.bracket'] = { link = 'TSPunctBracket' },
          -- ['@punctuation.delimiter'] = { link = 'TSPunctDelimiter' },
          -- ['@punctuation.special'] = { link = 'TSPunctSpecial' },
          -- ['@repeat'] = { link = 'TSRepeat' },
          -- ['@storageclass'] = { link = 'TSStorageClass' },
          -- ['@storageclass.lifetime'] = { link = 'TSStorageClassLifetime' },
          -- ['@strike'] = { link = 'TSStrike' },
          -- ['@string'] = { link = 'TSString' },
          -- ['@string.escape'] = { link = 'TSStringEscape' },
          -- ['@string.regex'] = { link = 'TSStringRegex' },
          -- ['@string.special'] = { link = 'TSStringSpecial' },
          -- ['@symbol'] = { link = 'TSSymbol' },
          -- ['@tag'] = { link = 'TSTag' },
          -- ['@tag.attribute'] = { link = 'TSTagAttribute' },
          -- ['@tag.delimiter'] = { link = 'TSTagDelimiter' },
          -- ['@text'] = { link = 'TSText' },
          -- ['@text.danger'] = { link = 'TSDanger' },
          -- ['@text.diff.add'] = { link = 'diffAdded' },
          -- ['@text.diff.delete'] = { link = 'diffRemoved' },
          -- ['@text.emphasis'] = { link = 'TSEmphasis' },
          -- ['@text.environment'] = { link = 'TSEnvironment' },
          -- ['@text.environment.name'] = { link = 'TSEnvironmentName' },
          -- ['@text.literal'] = { link = 'TSLiteral' },
          -- ['@text.math'] = { link = 'TSMath' },
          -- ['@text.note'] = { link = 'TSNote' },
          -- ['@text.reference'] = { link = 'TSTextReference' },
          -- ['@text.strike'] = { link = 'TSStrike' },
          -- ['@text.strong'] = { link = 'TSStrong' },
          -- ['@text.title'] = { link = 'TSTitle' },
          -- ['@text.todo'] = { link = 'TSTodo' },
          -- ['@text.todo.checked'] = { link = 'Green' },
          -- ['@text.todo.unchecked'] = { link = 'Ignore' },
          -- ['@text.underline'] = { link = 'TSUnderline' },
          -- ['@text.uri'] = { link = 'TSURI' },
          -- ['@text.warning'] = { link = 'TSWarning' },
          -- ['@todo'] = { link = 'TSTodo' },
          -- ['@type'] = { link = 'TSType' },
          -- ['@uri'] = { link = 'TSURI' },
          -- ['@variable'] = { link = 'TSVariable' },
          -- ['@variable.builtin'] = { link = 'TSVariableBuiltin' },
          --
          -- ['@lsp.type.class'] = { link = 'TSType' },
          -- ['@lsp.type.comment'] = { link = 'TSComment' },
          -- ['@lsp.type.decorator'] = { link = 'TSFunction' },
          -- ['@lsp.type.enum'] = { link = 'TSType' },
          -- ['@lsp.type.enumMember'] = { link = 'TSProperty' },
          -- ['@lsp.type.events'] = { link = 'TSLabel' },
          -- ['@lsp.type.function'] = { link = 'TSFunction' },
          -- ['@lsp.type.interface'] = { link = 'TSType' },
          -- ['@lsp.type.keyword'] = { link = 'TSKeyword' },
          -- ['@lsp.type.macro'] = { link = 'TSConstMacro' },
          -- ['@lsp.type.method'] = { link = 'TSMethod' },
          -- ['@lsp.type.modifier'] = { link = 'TSTypeQualifier' },
          -- ['@lsp.type.namespace'] = { link = 'TSNamespace' },
          -- ['@lsp.type.number'] = { link = 'TSNumber' },
          -- ['@lsp.type.operator'] = { link = 'TSOperator' },
          -- ['@lsp.type.parameter'] = { link = 'TSParameter' },
          -- ['@lsp.type.property'] = { link = 'TSProperty' },
          -- ['@lsp.type.regexp'] = { link = 'TSStringRegex' },
          -- ['@lsp.type.string'] = { link = 'TSString' },
          -- ['@lsp.type.struct'] = { link = 'TSType' },
          -- ['@lsp.type.type'] = { link = 'TSType' },
          -- ['@lsp.type.typeParameter'] = { link = 'TSTypeDefinition' },
          -- ['@lsp.type.variable'] = { link = 'TSVariable' },
        end,
      }
    end,
  },
  {
    'catppuccin/nvim',
    name = 'catppuccin',
    priority = 1000,

    config = function()
      require('catppuccin').setup {
        transparent_background = true,
        float = {
          transparent = true,
          solid = false,
        },
        color_overrides = {
          mocha = {
            -- Slightly Darkened Catppuccin Mocha
            rosewater = '#ddb6b3',
            flamingo = '#dfb3b3',
            pink = '#dfadd1',
            mauve = '#b694e0',
            red = '#dd7c96',
            maroon = '#d18e97',
            peach = '#e39c7a',
            yellow = '#e5cf9f',
            green = '#94cc90',
            teal = '#84cbc3',
            sky = '#7fc4d8',
            sapphire = '#68b3d3',
            blue = '#7ca2e4',
            lavender = '#a2ace8',

            text = '#b8c0e0',
            subtext1 = '#a7afcb',
            subtext0 = '#959cb8',
            overlay2 = '#848aa3',
            overlay1 = '#72768e',
            overlay0 = '#5f6379',
            surface2 = '#4f5264',
            surface1 = '#3c3e4f',
            surface0 = '#2b2c3b',
            base = '#191924',
            mantle = '#13131d',
            crust = '#0d0d15',
          },
        },
        no_bold = true,
        no_italic = true,
        no_underline = true,
        integrations = {
          hop = true,
          harpoon = true,
          mason = true,
          neotest = true,
          notify = true,
          noice = true,
          dadbod_ui = true,
          gitsigns = true,
          mini = true,
          render_markdown = true,
          blink_cmp = {
            style = 'bordered',
          },
          snacks = true,
          native_lsp = {
            enabled = true,
            virtual_text = {
              errors = { 'italic' },
              hints = { 'italic' },
              warnings = { 'italic' },
              information = { 'italic' },
              ok = { 'italic' },
            },
            underlines = {
              errors = { 'undercurl' },
              hints = { 'undercurl' },
              warnings = { 'undercurl' },
              information = { 'undercurl' },
            },
            inlay_hints = {
              background = true,
            },
          },
          lsp_trouble = true,
          which_key = true,
          semantic_tokens = true,
          treesitter = true,
          treesitter_context = true,
        },
        highlight_overrides = {
          all = function(colors)
            return {
              -- Completion menu styling
              Pmenu = { bg = colors.mantle, fg = colors.text },
              PmenuSel = { bg = colors.surface0, fg = colors.text },
              PmenuSbar = { bg = colors.surface0 },
              PmenuThumb = { bg = colors.surface2 },
              PmenuExtra = { bg = colors.mantle, fg = colors.subtext1 },

              Visual = { bg = colors.mauve, fg = colors.text },

              -- Floating windows
              NormalFloat = { bg = colors.mantle },
              FloatBorder = { bg = colors.mantle, fg = colors.surface2 },
              FloatTitle = { bg = colors.mantle, fg = colors.text },

              -- Blink.cmp specific highlighting
              BlinkCmpMenu = { bg = colors.mantle, fg = colors.text },
              BlinkCmpMenuBorder = { bg = colors.mantle, fg = colors.surface2 },
              BlinkCmpMenuSelection = { bg = colors.surface0, fg = colors.text },
              BlinkCmpScrollBarThumb = { bg = colors.surface2 },
              BlinkCmpScrollBarGutter = { bg = colors.surface0 },
              BlinkCmpLabel = { bg = colors.mantle, fg = colors.text },
              BlinkCmpLabelDeprecated = { bg = colors.mantle, fg = colors.overlay0, strikethrough = true },
              BlinkCmpLabelDetail = { bg = colors.mantle, fg = colors.subtext1 },
              BlinkCmpLabelDescription = { bg = colors.mantle, fg = colors.subtext1 },
              BlinkCmpKind = { bg = colors.mantle, fg = colors.peach },
              BlinkCmpSource = { bg = colors.mantle, fg = colors.overlay1 },
              BlinkCmpGhostText = { fg = colors.overlay0, italic = true },
              BlinkCmpDoc = { bg = colors.mantle, fg = colors.text },
              BlinkCmpDocBorder = { bg = colors.mantle, fg = colors.surface2 },
              BlinkCmpDocSeparator = { bg = colors.mantle, fg = colors.surface1 },
              BlinkCmpDocCursorLine = { bg = colors.surface0 },
              BlinkCmpSignatureHelp = { bg = colors.mantle, fg = colors.text },
              BlinkCmpSignatureHelpBorder = { bg = colors.mantle, fg = colors.surface2 },
              BlinkCmpSignatureHelpActiveParameter = { bg = colors.surface0, fg = colors.peach, bold = true },

              -- Snacks.nvim picker NvChad style
              SnacksPicker = { bg = colors.base },
              SnacksPickerBorder = { fg = colors.surface0, bg = colors.base },
              SnacksPickerPreview = { bg = colors.base },
              SnacksPickerPreviewBorder = { fg = colors.base, bg = colors.base },
              SnacksPickerPreviewTitle = { fg = colors.base, bg = colors.green },
              SnacksPickerBoxBorder = { fg = colors.base, bg = colors.base },
              SnacksPickerInputBorder = { fg = colors.surface2, bg = colors.base },
              SnacksPickerInputSearch = { fg = colors.text, bg = colors.base },
              SnacksPickerList = { bg = colors.base },
              SnacksPickerListBorder = { fg = colors.base, bg = colors.base },
              SnacksPickerListTitle = { fg = colors.base, bg = colors.base },

              -- Additional picker elements
              SnacksPickerDir = { fg = colors.blue },
              SnacksPickerFile = { fg = colors.text },
              SnacksPickerMatch = { fg = colors.peach, bold = true },
              SnacksPickerCursor = { bg = colors.surface0, fg = colors.text },
              SnacksPickerSelected = { bg = colors.surface0, fg = colors.text },
              SnacksPickerIcon = { fg = colors.blue },
              SnacksPickerSource = { fg = colors.overlay1 },
              SnacksPickerCount = { fg = colors.overlay1 },
              SnacksPickerFooter = { fg = colors.overlay1 },
              SnacksPickerHeader = { fg = colors.text, bold = true },
              SnacksPickerSpecial = { fg = colors.peach },
              SnacksPickerIndent = { fg = colors.surface1 },
              SnacksPickerMulti = { fg = colors.peach },
              SnacksPickerTitle = { fg = colors.text, bold = true },
              SnacksPickerPrompt = { fg = colors.text },

              -- Snacks core components
              SnacksNotifierNormal = { bg = colors.mantle, fg = colors.text },
              SnacksNotifierBorder = { bg = colors.mantle, fg = colors.surface2 },
              SnacksNotifierTitle = { bg = colors.mantle, fg = colors.text, bold = true },
              SnacksNotifierIcon = { bg = colors.mantle, fg = colors.blue },
              SnacksNotifierIconInfo = { bg = colors.mantle, fg = colors.blue },
              SnacksNotifierIconWarn = { bg = colors.mantle, fg = colors.yellow },
              SnacksNotifierIconError = { bg = colors.mantle, fg = colors.red },

              -- Snacks Dashboard
              SnacksDashboardNormal = { bg = colors.base, fg = colors.text },
              SnacksDashboardDesc = { bg = colors.base, fg = colors.subtext1 },
              SnacksDashboardFile = { bg = colors.base, fg = colors.text },
              SnacksDashboardDir = { bg = colors.base, fg = colors.blue },
              SnacksDashboardFooter = { bg = colors.base, fg = colors.overlay1 },
              SnacksDashboardHeader = { bg = colors.base, fg = colors.text, bold = true },
              SnacksDashboardIcon = { bg = colors.base, fg = colors.blue },
              SnacksDashboardKey = { bg = colors.base, fg = colors.peach },
              SnacksDashboardTerminal = { bg = colors.base, fg = colors.text },
              SnacksDashboardSpecial = { bg = colors.base, fg = colors.peach },

              -- Tiny inline diagnostics
              TinyInlineDiagnosticVirtualTextError = { fg = colors.red },
              TinyInlineDiagnosticVirtualTextWarn = { fg = colors.yellow },
              TinyInlineDiagnosticVirtualTextInfo = { fg = colors.sapphire },
              TinyInlineDiagnosticVirtualTextHint = { fg = colors.lavender },

              CmpItemMenu = { fg = colors.surface2 },
              CursorLineNr = { fg = colors.text },
              GitSignsChange = { fg = colors.peach },
              LineNr = { fg = colors.overlay0 },
              LspInfoBorder = { link = 'FloatBorder' },
              VertSplit = { bg = colors.base, fg = colors.surface0 },
              WhichKeyFloat = { bg = colors.mantle },
              YankHighlight = { bg = colors.surface2 },
              FidgetTask = { fg = colors.subtext1 },
              FidgetTitle = { fg = colors.peach },

              IblIndent = { fg = colors.surface0 },
              IblScope = { fg = colors.overlay0 },

              Boolean = { fg = colors.mauve },
              Number = { fg = colors.mauve },
              Float = { fg = colors.mauve },

              PreProc = { fg = colors.mauve },
              PreCondit = { fg = colors.mauve },
              Include = { fg = colors.mauve },
              Define = { fg = colors.mauve },
              Conditional = { fg = colors.red },
              Repeat = { fg = colors.red },
              Keyword = { fg = colors.red },
              Typedef = { fg = colors.red },
              Exception = { fg = colors.red },
              Statement = { fg = colors.red },

              Error = { fg = colors.red },
              StorageClass = { fg = colors.peach },
              Tag = { fg = colors.peach },
              Label = { fg = colors.peach },
              Structure = { fg = colors.peach },
              Operator = { fg = colors.peach },
              Title = { fg = colors.peach },
              Special = { fg = colors.yellow },
              SpecialChar = { fg = colors.yellow },
              Type = { fg = colors.yellow, style = { 'bold' } },
              Function = { fg = colors.green, style = { 'bold' } },
              Delimiter = { fg = colors.subtext1 },
              Ignore = { fg = colors.subtext1 },
              Macro = { fg = colors.teal },

              TSAnnotation = { fg = colors.mauve },
              TSAttribute = { fg = colors.mauve },
              TSBoolean = { fg = colors.mauve },
              TSCharacter = { fg = colors.teal },
              TSCharacterSpecial = { link = 'SpecialChar' },
              TSComment = { link = 'Comment' },
              TSConditional = { fg = colors.red },
              TSConstBuiltin = { fg = colors.mauve },
              TSConstMacro = { fg = colors.mauve },
              TSConstant = { fg = colors.text },
              TSConstructor = { fg = colors.green },
              TSDebug = { link = 'Debug' },
              TSDefine = { link = 'Define' },
              TSEnvironment = { link = 'Macro' },
              TSEnvironmentName = { link = 'Type' },
              TSError = { link = 'Error' },
              TSException = { fg = colors.red },
              TSField = { fg = colors.blue },
              TSFloat = { fg = colors.mauve },
              TSFuncBuiltin = { fg = colors.green },
              TSFuncMacro = { fg = colors.green },
              TSFunction = { fg = colors.green },
              TSFunctionCall = { fg = colors.green },
              TSInclude = { fg = colors.red },
              TSKeyword = { fg = colors.red },
              TSKeywordFunction = { fg = colors.red },
              TSKeywordOperator = { fg = colors.peach },
              TSKeywordReturn = { fg = colors.red },
              TSLabel = { fg = colors.peach },
              TSLiteral = { link = 'String' },
              TSMath = { fg = colors.blue },
              TSMethod = { fg = colors.green },
              TSMethodCall = { fg = colors.green },
              TSNamespace = { fg = colors.yellow },
              TSNone = { fg = colors.text },
              TSNumber = { fg = colors.mauve },
              TSOperator = { fg = colors.peach },
              TSParameter = { fg = colors.text },
              TSParameterReference = { fg = colors.text },
              TSPreProc = { link = 'PreProc' },
              TSProperty = { fg = colors.blue },
              TSPunctBracket = { fg = colors.text },
              TSPunctDelimiter = { link = 'Delimiter' },
              TSPunctSpecial = { fg = colors.blue },
              TSRepeat = { fg = colors.red },
              TSStorageClass = { fg = colors.peach },
              TSStorageClassLifetime = { fg = colors.peach },
              TSStrike = { fg = colors.subtext1 },
              TSString = { fg = colors.teal },
              TSStringEscape = { fg = colors.green },
              TSStringRegex = { fg = colors.green },
              TSStringSpecial = { link = 'SpecialChar' },
              TSSymbol = { fg = colors.text },
              TSTag = { fg = colors.peach },
              TSTagAttribute = { fg = colors.green },
              TSTagDelimiter = { fg = colors.green },
              TSText = { fg = colors.green },
              TSTextReference = { link = 'Constant' },
              TSTitle = { link = 'Title' },
              TSTodo = { link = 'Todo' },
              TSType = { fg = colors.yellow, style = { 'bold' } },
              TSTypeBuiltin = { fg = colors.yellow, style = { 'bold' } },
              TSTypeDefinition = { fg = colors.yellow, style = { 'bold' } },
              TSTypeQualifier = { fg = colors.peach, style = { 'bold' } },
              TSURI = { fg = colors.blue },
              TSVariable = { fg = colors.text },
              TSVariableBuiltin = { fg = colors.mauve },

              ['@annotation'] = { link = 'TSAnnotation' },
              ['@attribute'] = { link = 'TSAttribute' },
              ['@boolean'] = { link = 'TSBoolean' },
              ['@character'] = { link = 'TSCharacter' },
              ['@character.special'] = { link = 'TSCharacterSpecial' },
              ['@comment'] = { link = 'TSComment' },
              ['@conceal'] = { link = 'Grey' },
              ['@conditional'] = { link = 'TSConditional' },
              ['@constant'] = { link = 'TSConstant' },
              ['@constant.builtin'] = { link = 'TSConstBuiltin' },
              ['@constant.macro'] = { link = 'TSConstMacro' },
              ['@constructor'] = { link = 'TSConstructor' },
              ['@debug'] = { link = 'TSDebug' },
              ['@define'] = { link = 'TSDefine' },
              ['@error'] = { link = 'TSError' },
              ['@exception'] = { link = 'TSException' },
              ['@field'] = { link = 'TSField' },
              ['@float'] = { link = 'TSFloat' },
              ['@function'] = { link = 'TSFunction' },
              ['@function.builtin'] = { link = 'TSFuncBuiltin' },
              ['@function.call'] = { link = 'TSFunctionCall' },
              ['@function.macro'] = { link = 'TSFuncMacro' },
              ['@include'] = { link = 'TSInclude' },
              ['@keyword'] = { link = 'TSKeyword' },
              ['@keyword.function'] = { link = 'TSKeywordFunction' },
              ['@keyword.operator'] = { link = 'TSKeywordOperator' },
              ['@keyword.return'] = { link = 'TSKeywordReturn' },
              ['@label'] = { link = 'TSLabel' },
              ['@math'] = { link = 'TSMath' },
              ['@method'] = { link = 'TSMethod' },
              ['@method.call'] = { link = 'TSMethodCall' },
              ['@namespace'] = { link = 'TSNamespace' },
              ['@none'] = { link = 'TSNone' },
              ['@number'] = { link = 'TSNumber' },
              ['@operator'] = { link = 'TSOperator' },
              ['@parameter'] = { link = 'TSParameter' },
              ['@parameter.reference'] = { link = 'TSParameterReference' },
              ['@preproc'] = { link = 'TSPreProc' },
              ['@property'] = { link = 'TSProperty' },
              ['@punctuation.bracket'] = { link = 'TSPunctBracket' },
              ['@punctuation.delimiter'] = { link = 'TSPunctDelimiter' },
              ['@punctuation.special'] = { link = 'TSPunctSpecial' },
              ['@repeat'] = { link = 'TSRepeat' },
              ['@storageclass'] = { link = 'TSStorageClass' },
              ['@storageclass.lifetime'] = { link = 'TSStorageClassLifetime' },
              ['@strike'] = { link = 'TSStrike' },
              ['@string'] = { link = 'TSString' },
              ['@string.escape'] = { link = 'TSStringEscape' },
              ['@string.regex'] = { link = 'TSStringRegex' },
              ['@string.special'] = { link = 'TSStringSpecial' },
              ['@symbol'] = { link = 'TSSymbol' },
              ['@tag'] = { link = 'TSTag' },
              ['@tag.attribute'] = { link = 'TSTagAttribute' },
              ['@tag.delimiter'] = { link = 'TSTagDelimiter' },
              ['@text'] = { link = 'TSText' },
              ['@text.danger'] = { link = 'TSDanger' },
              ['@text.diff.add'] = { link = 'diffAdded' },
              ['@text.diff.delete'] = { link = 'diffRemoved' },
              ['@text.emphasis'] = { link = 'TSEmphasis' },
              ['@text.environment'] = { link = 'TSEnvironment' },
              ['@text.environment.name'] = { link = 'TSEnvironmentName' },
              ['@text.literal'] = { link = 'TSLiteral' },
              ['@text.math'] = { link = 'TSMath' },
              ['@text.note'] = { link = 'TSNote' },
              ['@text.reference'] = { link = 'TSTextReference' },
              ['@text.strike'] = { link = 'TSStrike' },
              ['@text.strong'] = { link = 'TSStrong' },
              ['@text.title'] = { link = 'TSTitle' },
              ['@text.todo'] = { link = 'TSTodo' },
              ['@text.todo.checked'] = { link = 'Green' },
              ['@text.todo.unchecked'] = { link = 'Ignore' },
              ['@text.underline'] = { link = 'TSUnderline' },
              ['@text.uri'] = { link = 'TSURI' },
              ['@text.warning'] = { link = 'TSWarning' },
              ['@todo'] = { link = 'TSTodo' },
              ['@type'] = { link = 'TSType' },
              ['@type.builtin'] = { link = 'TSTypeBuiltin' },
              ['@type.definition'] = { link = 'TSTypeDefinition' },
              ['@type.qualifier'] = { link = 'TSTypeQualifier' },
              ['@uri'] = { link = 'TSURI' },
              ['@variable'] = { link = 'TSVariable' },
              ['@variable.builtin'] = { link = 'TSVariableBuiltin' },

              ['@lsp.type.class'] = { link = 'TSType' },
              ['@lsp.type.comment'] = { link = 'TSComment' },
              ['@lsp.type.decorator'] = { link = 'TSFunction' },
              ['@lsp.type.enum'] = { link = 'TSType' },
              ['@lsp.type.enumMember'] = { link = 'TSProperty' },
              ['@lsp.type.events'] = { link = 'TSLabel' },
              ['@lsp.type.function'] = { link = 'TSFunction' },
              ['@lsp.type.interface'] = { link = 'TSType' },
              ['@lsp.type.keyword'] = { link = 'TSKeyword' },
              ['@lsp.type.macro'] = { link = 'TSConstMacro' },
              ['@lsp.type.method'] = { link = 'TSMethod' },
              ['@lsp.type.modifier'] = { link = 'TSTypeQualifier' },
              ['@lsp.type.namespace'] = { link = 'TSNamespace' },
              ['@lsp.type.number'] = { link = 'TSNumber' },
              ['@lsp.type.operator'] = { link = 'TSOperator' },
              ['@lsp.type.parameter'] = { link = 'TSParameter' },
              ['@lsp.type.property'] = { link = 'TSProperty' },
              ['@lsp.type.regexp'] = { link = 'TSStringRegex' },
              ['@lsp.type.string'] = { link = 'TSString' },
              ['@lsp.type.struct'] = { link = 'TSType' },
              ['@lsp.type.type'] = { link = 'TSType' },
              ['@lsp.type.typeParameter'] = { link = 'TSTypeDefinition' },
              ['@lsp.type.variable'] = { link = 'TSVariable' },
            }
          end,
        },
      }
    end,
  },
  {
    'mcauley-penney/techbase.nvim',
    opts = {
      italic_comments = false,

      -- set to true to make the background, floating windows, statusline,
      -- signcolumn, foldcolumn, and tabline transparent
      transparent = true,

      -- Here, you can disable plugins. All plugins that techbase supports
      -- are enabled by default. You do not need to specify the ones you
      -- want to enable, only those you wish to disable. This table
      -- accepts key-pair values.
      plugin_support = {
        visual_whitespace = false,
      },

      -- You can enable *only* some plugins by using the "only" table
      -- inside of the "plugin_support" table. This table accepts strings.
      -- plugin_support = {
      --   only = { "visual_whitespace" }
      -- },

      -- allows you to override any highlight group for finer-grained control
      hl_overrides = {},
    },
    priority = 1000,
  },
  {
    'folke/tokyonight.nvim',
    priority = 1000,
    opts = {
      transparent = true,
      styles = {
        keywords = {
          italic = false,
        },
      },
    },
  },
  {
    'rose-pine/neovim',
    name = 'rose-pine',
    config = function()
      require('rose-pine').setup {
        styles = {
          transparency = true,
        },
      }
    end,
  },
  { 'savq/melange-nvim' },
  { 'AhmedAbdulrahman/aylin.vim' },
  {
    'rebelot/kanagawa.nvim',
    config = function()
      require('kanagawa').setup {
        transparent = true,
      }
    end,
  },
  {
    'thesimonho/kanagawa-paper.nvim',
    lazy = false,
    priority = 1000,
    opts = {
      transparent = true,
    },
  },
  {
    'sainnhe/gruvbox-material',
    config = function()
      vim.g.gruvbox_material_transparent_background = 1
    end,
  },
  {
    '2nthony/vitesse.nvim',
    dependencies = {
      'tjdevries/colorbuddy.nvim',
    },
    opts = {
      transparent_background = true,
      transparent_float_background = false,
    },
  },
  {
    'vague2k/vague.nvim',
    config = function()
      require('vague').setup {
        transparent = true,
        style = {
          boolean = 'bold',
          number = 'none',
          float = 'none',
          error = 'bold',
          comments = 'italic',
          conditionals = 'none',
          functions = 'none',
          headings = 'bold',
          operators = 'none',
          strings = 'italic',
          variables = 'none',

          -- keywords
          keywords = 'none',
          keyword_return = 'italic',
          keywords_loop = 'none',
          keywords_label = 'none',
          keywords_exception = 'none',

          -- builtin
          builtin_constants = 'bold',
          builtin_functions = 'none',
          builtin_types = 'bold',
          builtin_variables = 'none',
        },
      }
    end,
  },
}
